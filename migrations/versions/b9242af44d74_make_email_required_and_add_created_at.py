"""make_email_required_and_add_created_at

Revision ID: b9242af44d74
Revises: 1aa86caba99a
Create Date: 2025-06-27 05:01:16.669849

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b9242af44d74'
down_revision = '1aa86caba99a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, add the created_at column
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
    
    # Handle existing users without emails before making email required
    connection = op.get_bind()
    
    # Set current timestamp for created_at for existing users
    connection.execute(sa.text("UPDATE \"user\" SET created_at = NOW() WHERE created_at IS NULL"))
    
    # Update users with NULL or empty emails to have a default email
    # This prevents constraint violation when making email NOT NULL
    result = connection.execute(sa.text("SELECT id, username FROM \"user\" WHERE email IS NULL OR email = ''"))
    users_without_email = result.fetchall()
    
    for user in users_without_email:
        user_id, username = user
        default_email = f"{username}@placeholder.local"
        connection.execute(
            sa.text("UPDATE \"user\" SET email = :email WHERE id = :user_id"),
            {"email": default_email, "user_id": user_id}
        )
        print(f"Set default email for user '{username}': {default_email}")
    
    if users_without_email:
        print(f"IMPORTANT: {len(users_without_email)} users had placeholder emails assigned.")
        print("Please update these emails in the admin panel after migration completes.")
    
    # Now make email field required
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=True)
        batch_op.drop_column('created_at')

    # ### end Alembic commands ###
